import json
from web3 import Web3

# Configuration
NETWORK_URL = "https://rinkeby.infura.io/v3/YOUR_INFURA_PROJECT_ID"
PRIVATE_KEY = "YOUR_PRIVATE_KEY"
CONTRACT_ABI_PATH = "../blockchain/contracts/Token.json"
CONTRACT_BYTECODE_PATH = "../blockchain/contracts/TokenBytecode.json"
DEPLOYER_ADDRESS = "YOUR_WALLET_ADDRESS"

def load_abi_and_bytecode():
    """Loads the contract ABI and bytecode."""
    with open(CONTRACT_ABI_PATH, 'r') as abi_file:
        abi = json.load(abi_file)

    with open(CONTRACT_BYTECODE_PATH, 'r') as bytecode_file:
        bytecode = json.load(bytecode_file)

    return abi, bytecode

def deploy_contract():
    """Deploys the smart contract to the specified network."""
    web3 = Web3(Web3.HTTPProvider(NETWORK_URL))
    if not web3.isConnected():
        raise ConnectionError("Unable to connect to the blockchain network.")

    abi, bytecode = load_abi_and_bytecode()

    # Create contract instance
    Contract = web3.eth.contract(abi=abi, bytecode=bytecode)

    # Get the nonce
    nonce = web3.eth.get_transaction_count(DEPLOYER_ADDRESS)

    # Build transaction
    transaction = Contract.constructor().buildTransaction({
        'from': DEPLOYER_ADDRESS,
        'nonce': nonce,
        'gas': 3000000,
        'gasPrice': web3.toWei('20', 'gwei')
    })

    # Sign transaction
    signed_txn = web3.eth.account.sign_transaction(transaction, private_key=PRIVATE_KEY)

    # Send transaction
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print(f"Transaction hash: {web3.toHex(tx_hash)}")

    # Wait for receipt
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"Contract deployed at address: {tx_receipt.contractAddress}")

if __name__ == "__main__":
    try:
        deploy_contract()
    except Exception as e:
        print(f"Error: {e}")
