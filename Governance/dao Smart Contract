// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title AIRealms DAO Governance Contract
 * @dev A simple governance contract to allow token holders to propose and vote on changes.
 */

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract AIRealmsDAO is Ownable {
    struct Proposal {
        uint256 id;
        string description;
        uint256 votesFor;
        uint256 votesAgainst;
        bool executed;
        uint256 deadline;
        address proposer;
    }

    IERC20 public realmToken;
    uint256 public proposalCount;
    mapping(uint256 => Proposal) public proposals;
    mapping(uint256 => mapping(address => bool)) public hasVoted;

    event ProposalCreated(
        uint256 id,
        string description,
        address proposer,
        uint256 deadline
    );

    event Voted(
        uint256 id,
        address voter,
        bool support,
        uint256 weight
    );

    event ProposalExecuted(uint256 id);

    modifier onlyTokenHolders() {
        require(realmToken.balanceOf(msg.sender) > 0, "Must hold $REALM tokens to participate.");
        _;
    }

    constructor(address tokenAddress) {
        realmToken = IERC20(tokenAddress);
    }

    function createProposal(string calldata description, uint256 duration) external onlyTokenHolders {
        proposalCount++;
        uint256 proposalId = proposalCount;
        uint256 deadline = block.timestamp + duration;

        proposals[proposalId] = Proposal({
            id: proposalId,
            description: description,
            votesFor: 0,
            votesAgainst: 0,
            executed: false,
            deadline: deadline,
            proposer: msg.sender
        });

        emit ProposalCreated(proposalId, description, msg.sender, deadline);
    }

    function vote(uint256 proposalId, bool support) external onlyTokenHolders {
        Proposal storage proposal = proposals[proposalId];
        require(block.timestamp < proposal.deadline, "Voting period has ended.");
        require(!hasVoted[proposalId][msg.sender], "You have already voted.");

        uint256 voterWeight = realmToken.balanceOf(msg.sender);
        if (support) {
            proposal.votesFor += voterWeight;
        } else {
            proposal.votesAgainst += voterWeight;
        }

        hasVoted[proposalId][msg.sender] = true;

        emit Voted(proposalId, msg.sender, support, voterWeight);
    }

    function executeProposal(uint256 proposalId) external onlyOwner {
        Proposal storage proposal = proposals[proposalId];
        require(block.timestamp >= proposal.deadline, "Voting period is not over.");
        require(!proposal.executed, "Proposal already executed.");

        proposal.executed = true;

        // Add logic for execution of proposal (e.g., upgrading contracts, distributing funds, etc.)

        emit ProposalExecuted(proposalId);
    }
}
